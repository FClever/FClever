apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile file('D:/key.jks')
            keyAlias 'key'
            keyPassword '123456'
            storePassword '123456'
        }
    }

    defaultConfig {
        applicationId "cn.hnhczn.app"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = getDefConfig()
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //自定义打包文件名
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def project = "hnhczn";
                    def versionCode = rootProject.ext.android["versionCode"]
                    def versionName = rootProject.ext.android["versionName"]
                    def date = new Date()
                    def formattedDate = date.format('yyyy_MM_dd_HH_mm')
                    outputFileName = project + "-" + versionCode + "-" + versionName + "-" + formattedDate + ".apk"
                }
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    //图片选择器与rxjava冲突解决
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    //多渠道打包
    flavorDimensions "default"
    productFlavors {
        hnznDebug {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "debug"]
        }
        hnznTest {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "test"]
        }
        hnznProduct {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "product"]
        }
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }

}


def getDefConfig() {
    return [
            desk_name          : "@string/app_name",
            icon               : "@mipmap/logo",
            UMENG_CHANNEL_VALUE: "hczn"]
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    if (!isBuildModule.toBoolean()) {
        //在宿主 App 中使用 implementation 依赖业务组件, 业务组件的代码就会完全暴露给宿主 App, 不利于代码的隔离
        //使用 runtimeOnly 依赖业务组件, 可实现业务组件的代码在编译时对宿主 App 不可见, 仅在运行时对宿主 App 可见
        runtimeOnly project(":hnhczn")
    }
    implementation project(":CommonRes")
    implementation project(":CommonService")

    //tools
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    //test
    testImplementation rootProject.ext.dependencies["junit"]
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
}
